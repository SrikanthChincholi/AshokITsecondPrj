<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="6" passed="2" failed="1" skipped="3">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-02-05T12:16:03 IST" name="Suite" finished-at="2023-02-05T12:17:09 IST" duration-ms="65846">
    <groups>
    </groups>
    <test started-at="2023-02-05T12:16:03 IST" name="Test1" finished-at="2023-02-05T12:17:09 IST" duration-ms="65846">
      <class name="test.TestClass">
        <test-method is-config="true" signature="suiteConfig()[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:02 IST" name="suiteConfig" finished-at="2023-02-05T12:16:03 IST" duration-ms="642" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteConfig -->
        <test-method is-config="true" signature="setUp(org.testng.ITestContext,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:03 IST" name="setUp" finished-at="2023-02-05T12:16:16 IST" duration-ms="13239" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@733534f9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:18 IST" name="test1" data-provider="exceldatadp" finished-at="2023-02-05T12:16:31 IST" duration-ms="13184" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Yes]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[admin123]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Dashboard]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method is-config="true" signature="ameth(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:31 IST" name="ameth" finished-at="2023-02-05T12:16:34 IST" duration-ms="3016" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=test1 status=SUCCESS method=TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ameth -->
        <test-method signature="test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:34 IST" name="test1" data-provider="exceldatadp" finished-at="2023-02-05T12:16:49 IST" duration-ms="15314" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Yes]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[admin123]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Dashboard]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method is-config="true" signature="ameth(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:49 IST" name="ameth" finished-at="2023-02-05T12:16:52 IST" duration-ms="3009" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=test1 status=SUCCESS method=TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ameth -->
        <test-method signature="test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:52 IST" name="test1" data-provider="exceldatadp" finished-at="2023-02-05T12:16:55 IST" duration-ms="2495" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Yes]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[admin123]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Dashboard123]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Dashboard] but found [Dashboard123]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Dashboard] but found [Dashboard123]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1577)
at org.testng.Assert.assertEqualsImpl(Assert.java:149)
at org.testng.Assert.assertEquals(Assert.java:131)
at org.testng.Assert.assertEquals(Assert.java:655)
at org.testng.Assert.assertEquals(Assert.java:665)
at test.TestClass.test1(TestClass.java:48)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method is-config="true" signature="ameth(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:55 IST" name="ameth" finished-at="2023-02-05T12:16:58 IST" duration-ms="3392" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=test1 status=FAILURE method=TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ameth -->
        <test-method signature="test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:58 IST" name="test1" data-provider="exceldatadp" finished-at="2023-02-05T12:16:58 IST" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[No]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[admin123]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Dashboard]]>
              </value>
            </param>
          </params>
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[This test is not set for run !!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: This test is not set for run !!
at test.TestClass.test1(TestClass.java:79)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method is-config="true" signature="ameth(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:16:58 IST" name="ameth" finished-at="2023-02-05T12:17:01 IST" duration-ms="3002" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=test1 status=SKIP method=TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ameth -->
        <test-method signature="test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:17:01 IST" name="test1" data-provider="exceldatadp" finished-at="2023-02-05T12:17:01 IST" duration-ms="2" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[No]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[admin123]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Dashboard]]>
              </value>
            </param>
          </params>
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[This test is not set for run !!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: This test is not set for run !!
at test.TestClass.test1(TestClass.java:79)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method is-config="true" signature="ameth(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:17:01 IST" name="ameth" finished-at="2023-02-05T12:17:04 IST" duration-ms="3014" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=test1 status=SKIP method=TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ameth -->
        <test-method signature="test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:17:04 IST" name="test1" data-provider="exceldatadp" finished-at="2023-02-05T12:17:04 IST" duration-ms="11" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[No]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[admin123]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Dashboard123]]>
              </value>
            </param>
          </params>
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[This test is not set for run !!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: This test is not set for run !!
at test.TestClass.test1(TestClass.java:79)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method is-config="true" signature="ameth(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:17:04 IST" name="ameth" finished-at="2023-02-05T12:17:07 IST" duration-ms="3015" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=test1 status=SKIP method=TestClass.test1(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.TestClass@1f9e9475] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ameth -->
        <test-method is-config="true" signature="atest()[pri:0, instance:test.TestClass@1f9e9475]" started-at="2023-02-05T12:17:07 IST" name="atest" finished-at="2023-02-05T12:17:09 IST" duration-ms="1633" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atest -->
      </class> <!-- test.TestClass -->
    </test> <!-- Test1 -->
  </suite> <!-- Suite -->
</testng-results>
